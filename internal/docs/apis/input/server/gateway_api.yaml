openapi: 3.0.3
info:
  title: Gateway API
  description: Gateway API which client applications access, and which places the requests on Queues to be consumed by other services 
  version: 0.0.0
tags:
  - name: Users
    description: Operations to manage users.
  - name: Sessions
    description: Operations to manage user sessions.
servers:
  - url: http://{host}:{port}/
    description: Gateway API's base URL
    variables:
      host:
        # If updating, update the default value in cmd/server/gateway/main.go!
        default: localhost
        description: Localhost by default for testing.
      port:
        # If updating, update the default value in cmd/server/gateway/main.go!
        default: '10000'
        description: The port on which the servers runs, defaults to 10000.
components:
  schemas:
    Username:
      description: User's username.
      type: string
      # If updating min/max, update the default value in cmd/server/gateway/main.go!
      minLength: 3
      maxLength: 20
      example: foo
    Password:
      description: User's password.
      type: string
      format: password
      # If updating min/max, update the default value in cmd/server/gateway/main.go!
      minLength: 8
      maxLength: 256
      example: 'bar45678'
    SessionToken:
      description: User's session-token.
      type: string
      example: abcd1234
    UsernameAndPassword:
      description: User's username and password.
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password: 
          $ref: '#/components/schemas/Password'
      required:
       - username
       - password
      example: {"username": "foo", "password": "bar45678"}
  parameters:
    Username:
      name: username
      description: User's username.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Username'
      example: foo
    SessionToken:
        in: header
        name: session-token
        description: User's session-token.
        required: true
        schema:
          $ref: '#/components/schemas/SessionToken'
        example: 'abcd1234'
  responses:
    Conflict:
        description: Conflict.
    NoContent:
        description: No Content.
    NotAcceptable:
        description: Not Acceptable.
    BadRequest:
        description: Bad Request.
    Unauthorized:
        description: Access token is missing or invalid.
        headers:
          WWW_Authenticate:
            schema:
              type: string
              example: Bearer charset="UTF-8"
    Forbidden:
        description: Forbidden.
    UnsupportedMediaType:
        description: Unsupported Media Type.
    UnprocessableEntity:
        description: Unprocessable Entity.
  securitySchemes:
    bearerAuth:
      description: Bearer auth.
      type: http
      scheme: bearer

paths:
  /v1/users:
    post:
      summary: Creates a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: Request body containing user's username and password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameAndPassword'
            example: {"username": "foo", "password": "bar45678"}
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  rel:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/v1/users/foo'
              example: {"username": "foo", "rel": {"self": "/v1/users/foo"}}
        '400':
          $ref: '#/components/responses/BadRequest' 
        '409':
          $ref: '#/components/responses/Conflict'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /v1/users/{username}:
    get:
      summary: Gets user info
      operationId: getUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  rel:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/v1/users/foo'
                      session:
                        type: string
                        example: '/v1/users/sessions/foo'
              example: {"username": "foo", "rel": {"self": "/v1/users/foo", "session": "/v1/users/sessions/foo"}}
        '406':
          $ref: '#/components/responses/NotAcceptable'

    patch:
      summary: Updates a user
      operationId: updateUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        description: User's password and session token.
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                session-token:
                  type: string
            example: {"password": "bar", "session-token": "foo"}
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  rel:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/v1/users/foo'
              example: {"username": "foo", "rel": {"self": "/v1/users/foo"}}
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      summary: Deletes a user
      operationId: deleteUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /v1/users/sessions/{username}:
    post:
      summary: Starts a user session
      operationId: createSession
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        description: Request body containing user's password.
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Password'
            example: 'bar45678'
      responses:
        '201':
          description: Session created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session-token:
                    type: string
                  rel:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/v1/users/sessions/username'
              example: {"session-token": "abcd1234", "rel": {"self": "/v1/users/sessions/username"}}
    
    delete:
      summary: Terminates session
      operationId: terminateSession
      tags:
        - Sessions
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'